---
name: docker

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - trunk

jobs:

  docker-build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "2"

      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v32
        with:
          files: |
            Dockerfile
            **/configure.sh

      - name: Docker meta
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository }}-base
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Set up QEMU
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          target: base
          push: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push twophase
        if: ${{ !(steps.changed-files-specific.outputs.any_changed == 'true' && github.event_name == 'pull_request') }}
        uses: docker/build-push-action@v2
        with:
          context: .
          target: twophase
          push: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push atomizer
        if: ${{ !(steps.changed-files-specific.outputs.any_changed == 'true' && github.event_name == 'pull_request') }}
        uses: docker/build-push-action@v2
        with:
          context: .
          target: atomizer
          push: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push twophase (PR, with base changes)
        if: ${{ steps.changed-files-specific.outputs.any_changed == 'true' && github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          target: twophase
          push: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=localhost:5000/base

      - name: Build and push atomizer (PR, with base changes)
        if: ${{ steps.changed-files-specific.outputs.any_changed == 'true' && github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          target: atomizer
          push: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=localhost:5000/base
